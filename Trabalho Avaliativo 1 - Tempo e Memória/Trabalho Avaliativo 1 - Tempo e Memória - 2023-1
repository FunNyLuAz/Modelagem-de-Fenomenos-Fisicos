{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOdoa4nz7FKmZr2pz8T1PpZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/FunNyLuAz/Modelagem-de-Fenomenos-Fisicos/blob/main/Trabalho_Avaliativo_1_Tempo_e_Mem%C3%B3ria_2023_1.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "A) Criar um array com 1000 caracteres aleatórios"
      ],
      "metadata": {
        "id": "gV7mg8TvSwwG"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a_ofMqUrrjrW",
        "outputId": "a056a725-c359-433e-e97e-5b27dce0d8e0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Com a biblioteca random, em 5449265ns foi usado ao final 604925bytes, com um pico de 669391bytes\n"
          ]
        }
      ],
      "source": [
        "#A) (Com biblioteca Random)\n",
        "\n",
        "import time\n",
        "import tracemalloc\n",
        "\n",
        "import random as rand\n",
        "\n",
        "initialTime = time.time_ns() # Salva o tempo inicial em nanosegundos\n",
        "tracemalloc.start() # Inicia monitoramento da memória\n",
        "\n",
        "chars = list()\n",
        "for i in range(1000):\n",
        "  chars.append(chr(rand.randint(0, 127)))\n",
        "# OBS.: Usando uma String acaba sendo muito mais eficiente em consumo de memória\n",
        "\n",
        "memoryUsed = tracemalloc.get_traced_memory() # Salva a memória usada\n",
        "tracemalloc.stop() # Finaliza monitoramento da memória\n",
        "endTime = time.time_ns() # Salva o tempo final em nanosegundos\n",
        "\n",
        "print(f\"Com a biblioteca random, em {endTime - initialTime}ns foi usado ao final {memoryUsed[0]}bytes, com um pico de {memoryUsed[1]}bytes\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#A) (Com o Mersenne Twister (MT19937) do Numpy.random)\n",
        "\n",
        "import time\n",
        "import tracemalloc\n",
        "\n",
        "import numpy.random as rand\n",
        "\n",
        "initialTime = time.time_ns() # Salva o tempo inicial em nanosegundos\n",
        "tracemalloc.start() # Inicia monitoramento da memória\n",
        "\n",
        "chars = list()\n",
        "bitGen = rand.MT19937(rand.SeedSequence())\n",
        "for i in range(1000):\n",
        "    chars.append(chr(rand.Generator(bitGen).integers(0, 127)))\n",
        "    bitGen = bitGen.jumped()\n",
        "# OBS.: Usando uma String acaba sendo muito mais eficiente em consumo de memória\n",
        "\n",
        "memoryUsed = tracemalloc.get_traced_memory() # Salva a memória usada\n",
        "tracemalloc.stop() # Finaliza monitoramento da memória\n",
        "endTime = time.time_ns() # Salva o tempo final em nanosegundos\n",
        "\n",
        "print(f\"Com o Mersenne Twister (MT19937), em {endTime - initialTime}ns foi usado ao final {memoryUsed[0]}bytes, com um pico de {memoryUsed[1]}bytes\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dju_KrFAxgY5",
        "outputId": "35cafa49-f917-460e-cfbf-43e9400af459"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Com o Mersenne Twister (MT19937), em 9347334345ns foi usado ao final 45400bytes, com um pico de 106908bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "B) Ordenar um array com 1000 caracteres"
      ],
      "metadata": {
        "id": "16Q1HGiTS9hU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#B)\n",
        "\n",
        "import time\n",
        "import tracemalloc\n",
        "\n",
        "import random as rand\n",
        "\n",
        "chars = list()\n",
        "for i in range(1000):\n",
        "  chars.append(chr(rand.randint(0, 127)))\n",
        "\n",
        "initialTime = time.time_ns() # Salva o tempo inicial em nanosegundos\n",
        "tracemalloc.start() # Inicia monitoramento da memória\n",
        "\n",
        "chars.sort()\n",
        "\n",
        "memoryUsed = tracemalloc.get_traced_memory() # Salva a memória usada\n",
        "tracemalloc.stop() # Finaliza monitoramento da memória\n",
        "endTime = time.time_ns() # Salva o tempo final em nanosegundos\n",
        "\n",
        "print(f\"Em {endTime - initialTime}ns foi usado ao final {memoryUsed[0]}bytes, com um pico de {memoryUsed[1]}bytes\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DppTmfvGTrLm",
        "outputId": "567d8574-32a9-4145-a509-9dc48105872a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Em 563251ns foi usado ao final 865bytes, com um pico de 11259bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "C) Imprimir, no terminal, um array com 1000 caracteres"
      ],
      "metadata": {
        "id": "SykzgVCQUI3f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#C)\n",
        "\n",
        "import time\n",
        "import tracemalloc\n",
        "\n",
        "import random as rand\n",
        "\n",
        "chars = list()\n",
        "for i in range(1000):\n",
        "  chars.append(chr(rand.randint(0, 127)))\n",
        "\n",
        "initialTime = time.time_ns() # Salva o tempo inicial em nanosegundos\n",
        "tracemalloc.start() # Inicia monitoramento da memória\n",
        "\n",
        "print(chars)\n",
        "\n",
        "memoryUsed = tracemalloc.get_traced_memory() # Salva a memória usada\n",
        "tracemalloc.stop() # Finaliza monitoramento da memória\n",
        "endTime = time.time_ns() # Salva o tempo final em nanosegundos\n",
        "\n",
        "print(f\"Imprimindo como uma Lista, em {endTime - initialTime}ns foi usado ao final {memoryUsed[0]}bytes, com um pico de {memoryUsed[1]}bytes\")\n",
        "\n",
        "# ---\n",
        "\n",
        "initialTime = time.time_ns() # Salva o tempo inicial em nanosegundos\n",
        "tracemalloc.start() # Inicia monitoramento da memória\n",
        "\n",
        "text = \"\"\n",
        "for c in chars:\n",
        "  text += c\n",
        "print(chars)\n",
        "\n",
        "memoryUsed = tracemalloc.get_traced_memory() # Salva a memória usada\n",
        "tracemalloc.stop() # Finaliza monitoramento da memória\n",
        "endTime = time.time_ns() # Salva o tempo final em nanosegundos\n",
        "\n",
        "print(f\"Imprimindo como uma String, em {endTime - initialTime}ns foi usado ao final {memoryUsed[0]}bytes, com um pico de {memoryUsed[1]}bytes\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4tPTyOg1UPiD",
        "outputId": "e4e5ba2c-0cef-451e-e8bf-f919425b25e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['C', ':', 'R', '\\x18', '\\x0e', 'Z', '\\x13', '|', 'X', '\\x14', '|', '\\x15', 'N', '`', '!', '\\x03', 'd', 'K', 'o', 'E', 'Z', 'T', 'B', '8', '0', '\\x0b', 'G', 'N', '\\r', 'g', '\\x1d', ':', '6', '=', '9', '\\x16', '\\x0f', 'N', 's', 'b', 's', '\\\\', 'G', '\\r', '\\x17', '9', '$', ' ', 'f', 'l', '\\x04', '4', 'q', '~', 'd', '\\x0c', '6', '\"', '\\x0b', '\\x17', '\\x0e', '\\x0f', 'a', '\\n', 'z', 'V', '\\x17', 'e', '}', 'h', 'Z', '\\x17', '|', '\\x06', '3', '[', 'k', '^', '\\x18', '2', 'R', '(', 'e', 'l', '\\x1b', '&', '4', '$', '=', '!', '\\x18', 'C', 'E', 'R', '7', 'i', 'D', '2', 'C', '1', ':', 'f', '%', '`', '8', '`', 'P', 'i', 'w', '\\x07', 'z', '\\x1f', 'j', '\\x1d', 'J', ';', 'r', 'Y', '$', 'N', 's', '\\x07', '\\x12', '\\x05', '4', '\\x06', '\\x18', '\\x00', '\\x05', '~', '\\r', ':', 'H', 'J', 'Y', '3', 'j', '+', '\\x02', '>', '\\x0c', '\\x06', '\\x00', '\\x05', '\\x16', '\\x16', 'y', ':', '\\\\', '-', '\\x01', '\\t', 'b', ' ', 'i', ']', 'A', '=', '\\x1d', ']', '\\x10', '&', '|', '\\x1f', '~', ':', 'Y', 'z', '<', '.', ';', 'N', '\\x1b', '\\x0f', 'B', 'Q', '\\x15', '\\x1f', '\\x11', '~', '|', 'j', 'M', '{', '\\x0b', '\\x16', '\\x01', 't', 'd', '\\x02', '\\x1f', 'J', 'O', 'V', '?', '9', ' ', 'p', 'I', '\\x14', ' ', '_', 'p', '{', '}', 'b', ':', '\\x14', 'l', '\\x13', '[', '_', '=', 'G', 'U', '\\x06', 'x', 'g', 'w', '}', '%', '_', '0', '\\x06', 'l', 'J', '$', 'T', 'w', '\\x19', 't', 'J', '.', 'D', '\\x00', '\\x05', 'e', 'P', 'E', 's', '\\x1f', '\\x0c', 'm', '\\x1e', '7', '%', 'G', '\\x05', '&', 'S', '3', '\\x1f', 'x', '\\x16', 'a', 'w', '2', 'x', '\\x15', '@', 'L', '\\x1f', '\\x02', ' ', '!', 'd', 'y', '#', '#', 'k', '\\x14', '\\x10', '3', 'F', '.', '_', 'L', '^', '\\x03', '\\x13', 'M', '@', 'z', '\\x06', 'o', '9', '$', 'W', '-', 'O', '|', 'x', '1', '[', 'l', '2', '&', '_', 'N', '1', '`', 'b', 'h', '\\n', 'B', 'W', '\\x0c', '>', 'I', '|', 'J', 'z', ':', 'j', '3', 'y', 'Q', '\\x13', '6', 'm', ',', '\\x02', 'O', '\\t', '6', '\\x03', 'n', 'z', '}', '\\x0f', '\\x0b', 'b', '\\x0c', '\\x1a', '+', 'M', ',', '\\x0e', 'h', 'i', '&', 'K', '\\x1d', '\\x02', '4', 'R', '3', '\\x02', 'D', 'Z', 'I', '@', '\\r', 'y', '\\x16', '(', 'b', 'e', ')', 'T', '7', '0', 'Z', 'd', 'Z', 'a', '\\x1e', 'M', '+', '\\x0f', '.', 'A', 'A', 'q', 'n', '<', '\"', '2', 'F', '4', '*', 'g', '4', 'T', 'I', 'e', '}', 'W', 'T', '9', 'K', 'j', 'R', 'E', '\\x15', 'I', 'o', ')', 'u', 'W', 'y', 'W', 'F', '\\x16', '\\x17', 'W', 'Q', 'y', '[', 's', '7', 'j', 'K', '\\x7f', '\\x13', '+', 'n', 'j', '[', '+', '\\x0c', 'H', '\\x19', 's', '4', 't', '\\x1d', '\\x1b', '}', 'Z', ',', 'c', '\\x19', 'E', 'U', '-', '3', 'n', 'n', 'L', '-', 'D', '$', 'u', '{', '\\x1a', 'S', 'l', '\\x05', '}', 'f', 'G', '}', 'K', '\\x05', '\\x11', 'Z', '$', 'N', '|', '6', 'K', '2', '\"', 'm', '\\x13', 's', 'E', '\"', '{', 'U', 'h', 'C', '~', 'f', 'Y', '>', 'P', 'm', '\\x1f', '5', 'Z', 'M', ',', '6', 'i', 'r', '9', ';', 'F', '\\r', '\\r', \"'\", '6', '<', 'J', '\\r', '|', '\\x1a', 'E', '\\x06', '\\x02', 'w', 'o', 'K', 'q', '\\x14', 'z', '1', '$', 'A', '(', '{', '\\x19', 'A', '8', '~', '5', '-', 'r', '\\x00', '\\x1f', '\\x05', '4', 'Z', 'p', 'z', '\\x01', 'I', '[', '%', '\\x06', '?', '\\t', '!', '\\x04', '\\x15', 'H', '\\x04', 'v', '\\x0e', '<', 'l', 'R', 'M', 'U', '\\x12', ':', '\\x00', 'Q', '\\x0b', '#', 'p', '[', 'I', 'A', '9', 'z', 's', 'o', '?', '\\x13', 'Q', '\\x1f', '\\x13', '6', '/', 'q', 'w', '\\x01', '1', '\\x1f', '$', '\\x03', 'N', '`', 'Y', 'G', '8', 'e', 'r', '\\x01', 'i', '\\x00', '.', 'x', '\\x01', 'v', 'o', 'Y', '\\\\', '\\\\', 'I', '\\x0f', 'W', 'n', 'C', 'u', 'J', ')', '#', 'p', '}', '\\x07', '.', '\\x14', '`', '7', '\\x1e', '@', 'l', 'h', '\\x0e', '2', ':', ')', 'X', '2', '5', '?', \"'\", '#', 'n', '+', '8', '\\x11', '\\x7f', '\\x16', 's', '\\x1d', 'b', '\\x1f', '\\x18', ',', '\\x1f', '~', '\\x15', 'H', 'l', 'H', '\\x1e', '\\x10', '[', 'u', \"'\", '\\x18', 'q', '\\x05', 'h', '8', '2', '2', '|', '\\x1f', 'n', 'B', '`', '\\x0f', 'w', 'M', '=', '\\x12', ':', '\\x7f', '\\x02', 'D', 'X', '_', '\\x08', '\\x03', '$', ',', 'Q', 'X', 'W', '>', '=', '\\x1e', '\\t', '.', 'U', 'X', '\\x10', 'i', '\\t', '&', '\\x0c', '\\x19', '\\x07', '\\x06', ')', '\\x00', 'A', '\\x15', '^', '\"', ';', '&', 'i', '\\x14', 'L', 'S', 'X', '[', '\\x0e', ']', 'I', 'b', 'w', 'Y', 'W', '4', 'e', '\\x13', '\\r', 'o', '|', 'v', '\\x1c', 'L', '/', 'p', '&', 'A', 'y', '&', 'B', '|', 'f', '\\x00', '\\x10', ']', 'I', ',', 'n', ',', '|', '=', '<', '?', '0', '\\x16', '2', 'S', '4', '\\x1b', 'U', '\\t', 'O', '\\x1c', '\\x11', '\\x11', '@', '\\x1a', 'W', 'w', ')', 'l', '\\x13', '%', '\\x1f', '`', '\\x02', '\\x14', '/', '}', '\\x13', '8', '\\x03', 'B', 'K', '\\x19', 'Y', '\\x1b', '\\x05', '\\x0c', '[', 'm', 'a', 'm', '\\x00', '\\x0c', 'm', ')', '%', 'e', 'H', '6', '\\x14', '\\x18', 'U', '[', '\\\\', 'T', ')', '&', 'y', 'V', '\\x17', '\\x0b', '|', '\\r', 'G', 'J', ':', 'y', '\\x16', 'h', 'b', 'W', 'C', 'J', '\\r', 'M', 'w', '\\x13', 'U', 'T', 'b', '>', 'K', '=', 'v', '\\x00', '#', 'B', '\\x0e', 'I', 'U', 'J', '\\x02', '^', 'm', 'F', '\\x08', '\\x04', '\\x06', 'e', '5', 'i', '\\x0b', 'G', '&', '%', 'V', '6', 'A', \"'\", 'n', '\\t', '(', 'f', '\\x00', '\\x03', '\\x17', '|', 'w', 's', '{', '\\x14', 'G', 'e', '\\x11', ']', '!', '^', 'e', 'S', 'h', 'h', 'B', '`', ';', '\\x00', 'B', '\\x14', 'd', 'x', 'j', '\\x1d', ']', 'k', 'N', '~', 'u', '5', '!', 'E', '\\x1a', 'p', '3', '\\x16', 'i', '\\x03', '{', '\\x00', '\\r', '\\x7f', '=', '\\t', '3', '\\r', 'y', '\\x08', 'Z', '\\x07', '|', '%', 'T', '\\x06', ',', ']', '\\x1d', '\\x14', 'V', '\\x1c', '0', 'z', '!', '\\x04', 'N', ')', 'E', '7', '\\x0f', '\\x14', 'Z', '\\x12', 'V', 'h', \"'\", 'r', '\\x7f', '0', '\\x0c', 'D', '\\x17', '1', 'Q', '\\n', '\\x00', '\\x16', '\\x1c', '\\x7f', '\\x15', '0', '\\x18', 'a', '*', '\\x1c', 'C', 'M', 'Z', '\\t', '4', '\\x1d', 'E', '?', 'B', '\\x0c', '\\x13', '7', 'K', '2', '6', 's', 'q', '\\x1f', '\\x1f', '\\x07', 's', '\\x12', 'p', 'T', '&', 'M', 'f', '<', ' ', 't', 'p', '%', '\\x1a', '\\x01', 'h', 'U', '#', '\\x05', '2', 'J', ')', '\\x10', '?', 'y', '\\x16', '6', 'K', '\\x10', '{', 'x']\n",
            "Imprimindo como uma Lista, em 4617590ns foi usado ao final 7098bytes, com um pico de 17492bytes\n",
            "['C', ':', 'R', '\\x18', '\\x0e', 'Z', '\\x13', '|', 'X', '\\x14', '|', '\\x15', 'N', '`', '!', '\\x03', 'd', 'K', 'o', 'E', 'Z', 'T', 'B', '8', '0', '\\x0b', 'G', 'N', '\\r', 'g', '\\x1d', ':', '6', '=', '9', '\\x16', '\\x0f', 'N', 's', 'b', 's', '\\\\', 'G', '\\r', '\\x17', '9', '$', ' ', 'f', 'l', '\\x04', '4', 'q', '~', 'd', '\\x0c', '6', '\"', '\\x0b', '\\x17', '\\x0e', '\\x0f', 'a', '\\n', 'z', 'V', '\\x17', 'e', '}', 'h', 'Z', '\\x17', '|', '\\x06', '3', '[', 'k', '^', '\\x18', '2', 'R', '(', 'e', 'l', '\\x1b', '&', '4', '$', '=', '!', '\\x18', 'C', 'E', 'R', '7', 'i', 'D', '2', 'C', '1', ':', 'f', '%', '`', '8', '`', 'P', 'i', 'w', '\\x07', 'z', '\\x1f', 'j', '\\x1d', 'J', ';', 'r', 'Y', '$', 'N', 's', '\\x07', '\\x12', '\\x05', '4', '\\x06', '\\x18', '\\x00', '\\x05', '~', '\\r', ':', 'H', 'J', 'Y', '3', 'j', '+', '\\x02', '>', '\\x0c', '\\x06', '\\x00', '\\x05', '\\x16', '\\x16', 'y', ':', '\\\\', '-', '\\x01', '\\t', 'b', ' ', 'i', ']', 'A', '=', '\\x1d', ']', '\\x10', '&', '|', '\\x1f', '~', ':', 'Y', 'z', '<', '.', ';', 'N', '\\x1b', '\\x0f', 'B', 'Q', '\\x15', '\\x1f', '\\x11', '~', '|', 'j', 'M', '{', '\\x0b', '\\x16', '\\x01', 't', 'd', '\\x02', '\\x1f', 'J', 'O', 'V', '?', '9', ' ', 'p', 'I', '\\x14', ' ', '_', 'p', '{', '}', 'b', ':', '\\x14', 'l', '\\x13', '[', '_', '=', 'G', 'U', '\\x06', 'x', 'g', 'w', '}', '%', '_', '0', '\\x06', 'l', 'J', '$', 'T', 'w', '\\x19', 't', 'J', '.', 'D', '\\x00', '\\x05', 'e', 'P', 'E', 's', '\\x1f', '\\x0c', 'm', '\\x1e', '7', '%', 'G', '\\x05', '&', 'S', '3', '\\x1f', 'x', '\\x16', 'a', 'w', '2', 'x', '\\x15', '@', 'L', '\\x1f', '\\x02', ' ', '!', 'd', 'y', '#', '#', 'k', '\\x14', '\\x10', '3', 'F', '.', '_', 'L', '^', '\\x03', '\\x13', 'M', '@', 'z', '\\x06', 'o', '9', '$', 'W', '-', 'O', '|', 'x', '1', '[', 'l', '2', '&', '_', 'N', '1', '`', 'b', 'h', '\\n', 'B', 'W', '\\x0c', '>', 'I', '|', 'J', 'z', ':', 'j', '3', 'y', 'Q', '\\x13', '6', 'm', ',', '\\x02', 'O', '\\t', '6', '\\x03', 'n', 'z', '}', '\\x0f', '\\x0b', 'b', '\\x0c', '\\x1a', '+', 'M', ',', '\\x0e', 'h', 'i', '&', 'K', '\\x1d', '\\x02', '4', 'R', '3', '\\x02', 'D', 'Z', 'I', '@', '\\r', 'y', '\\x16', '(', 'b', 'e', ')', 'T', '7', '0', 'Z', 'd', 'Z', 'a', '\\x1e', 'M', '+', '\\x0f', '.', 'A', 'A', 'q', 'n', '<', '\"', '2', 'F', '4', '*', 'g', '4', 'T', 'I', 'e', '}', 'W', 'T', '9', 'K', 'j', 'R', 'E', '\\x15', 'I', 'o', ')', 'u', 'W', 'y', 'W', 'F', '\\x16', '\\x17', 'W', 'Q', 'y', '[', 's', '7', 'j', 'K', '\\x7f', '\\x13', '+', 'n', 'j', '[', '+', '\\x0c', 'H', '\\x19', 's', '4', 't', '\\x1d', '\\x1b', '}', 'Z', ',', 'c', '\\x19', 'E', 'U', '-', '3', 'n', 'n', 'L', '-', 'D', '$', 'u', '{', '\\x1a', 'S', 'l', '\\x05', '}', 'f', 'G', '}', 'K', '\\x05', '\\x11', 'Z', '$', 'N', '|', '6', 'K', '2', '\"', 'm', '\\x13', 's', 'E', '\"', '{', 'U', 'h', 'C', '~', 'f', 'Y', '>', 'P', 'm', '\\x1f', '5', 'Z', 'M', ',', '6', 'i', 'r', '9', ';', 'F', '\\r', '\\r', \"'\", '6', '<', 'J', '\\r', '|', '\\x1a', 'E', '\\x06', '\\x02', 'w', 'o', 'K', 'q', '\\x14', 'z', '1', '$', 'A', '(', '{', '\\x19', 'A', '8', '~', '5', '-', 'r', '\\x00', '\\x1f', '\\x05', '4', 'Z', 'p', 'z', '\\x01', 'I', '[', '%', '\\x06', '?', '\\t', '!', '\\x04', '\\x15', 'H', '\\x04', 'v', '\\x0e', '<', 'l', 'R', 'M', 'U', '\\x12', ':', '\\x00', 'Q', '\\x0b', '#', 'p', '[', 'I', 'A', '9', 'z', 's', 'o', '?', '\\x13', 'Q', '\\x1f', '\\x13', '6', '/', 'q', 'w', '\\x01', '1', '\\x1f', '$', '\\x03', 'N', '`', 'Y', 'G', '8', 'e', 'r', '\\x01', 'i', '\\x00', '.', 'x', '\\x01', 'v', 'o', 'Y', '\\\\', '\\\\', 'I', '\\x0f', 'W', 'n', 'C', 'u', 'J', ')', '#', 'p', '}', '\\x07', '.', '\\x14', '`', '7', '\\x1e', '@', 'l', 'h', '\\x0e', '2', ':', ')', 'X', '2', '5', '?', \"'\", '#', 'n', '+', '8', '\\x11', '\\x7f', '\\x16', 's', '\\x1d', 'b', '\\x1f', '\\x18', ',', '\\x1f', '~', '\\x15', 'H', 'l', 'H', '\\x1e', '\\x10', '[', 'u', \"'\", '\\x18', 'q', '\\x05', 'h', '8', '2', '2', '|', '\\x1f', 'n', 'B', '`', '\\x0f', 'w', 'M', '=', '\\x12', ':', '\\x7f', '\\x02', 'D', 'X', '_', '\\x08', '\\x03', '$', ',', 'Q', 'X', 'W', '>', '=', '\\x1e', '\\t', '.', 'U', 'X', '\\x10', 'i', '\\t', '&', '\\x0c', '\\x19', '\\x07', '\\x06', ')', '\\x00', 'A', '\\x15', '^', '\"', ';', '&', 'i', '\\x14', 'L', 'S', 'X', '[', '\\x0e', ']', 'I', 'b', 'w', 'Y', 'W', '4', 'e', '\\x13', '\\r', 'o', '|', 'v', '\\x1c', 'L', '/', 'p', '&', 'A', 'y', '&', 'B', '|', 'f', '\\x00', '\\x10', ']', 'I', ',', 'n', ',', '|', '=', '<', '?', '0', '\\x16', '2', 'S', '4', '\\x1b', 'U', '\\t', 'O', '\\x1c', '\\x11', '\\x11', '@', '\\x1a', 'W', 'w', ')', 'l', '\\x13', '%', '\\x1f', '`', '\\x02', '\\x14', '/', '}', '\\x13', '8', '\\x03', 'B', 'K', '\\x19', 'Y', '\\x1b', '\\x05', '\\x0c', '[', 'm', 'a', 'm', '\\x00', '\\x0c', 'm', ')', '%', 'e', 'H', '6', '\\x14', '\\x18', 'U', '[', '\\\\', 'T', ')', '&', 'y', 'V', '\\x17', '\\x0b', '|', '\\r', 'G', 'J', ':', 'y', '\\x16', 'h', 'b', 'W', 'C', 'J', '\\r', 'M', 'w', '\\x13', 'U', 'T', 'b', '>', 'K', '=', 'v', '\\x00', '#', 'B', '\\x0e', 'I', 'U', 'J', '\\x02', '^', 'm', 'F', '\\x08', '\\x04', '\\x06', 'e', '5', 'i', '\\x0b', 'G', '&', '%', 'V', '6', 'A', \"'\", 'n', '\\t', '(', 'f', '\\x00', '\\x03', '\\x17', '|', 'w', 's', '{', '\\x14', 'G', 'e', '\\x11', ']', '!', '^', 'e', 'S', 'h', 'h', 'B', '`', ';', '\\x00', 'B', '\\x14', 'd', 'x', 'j', '\\x1d', ']', 'k', 'N', '~', 'u', '5', '!', 'E', '\\x1a', 'p', '3', '\\x16', 'i', '\\x03', '{', '\\x00', '\\r', '\\x7f', '=', '\\t', '3', '\\r', 'y', '\\x08', 'Z', '\\x07', '|', '%', 'T', '\\x06', ',', ']', '\\x1d', '\\x14', 'V', '\\x1c', '0', 'z', '!', '\\x04', 'N', ')', 'E', '7', '\\x0f', '\\x14', 'Z', '\\x12', 'V', 'h', \"'\", 'r', '\\x7f', '0', '\\x0c', 'D', '\\x17', '1', 'Q', '\\n', '\\x00', '\\x16', '\\x1c', '\\x7f', '\\x15', '0', '\\x18', 'a', '*', '\\x1c', 'C', 'M', 'Z', '\\t', '4', '\\x1d', 'E', '?', 'B', '\\x0c', '\\x13', '7', 'K', '2', '6', 's', 'q', '\\x1f', '\\x1f', '\\x07', 's', '\\x12', 'p', 'T', '&', 'M', 'f', '<', ' ', 't', 'p', '%', '\\x1a', '\\x01', 'h', 'U', '#', '\\x05', '2', 'J', ')', '\\x10', '?', 'y', '\\x16', '6', 'K', '\\x10', '{', 'x']\n",
            "Imprimindo como uma String, em 1151248ns foi usado ao final 12800bytes, com um pico de 23194bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "D) Calcular 𝜋 Com 100 casas decimais usando a aproximação de Leibnitz"
      ],
      "metadata": {
        "id": "twuSCPO8V_-h"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#D)\n",
        "\n",
        "import time\n",
        "import tracemalloc\n",
        "\n",
        "import sympy\n",
        "\n",
        "initialTime = time.time_ns() # Salva o tempo inicial em nanosegundos\n",
        "tracemalloc.start() # Inicia monitoramento da memória\n",
        "\n",
        "pi = 0\n",
        "for i in range(9999):\n",
        "  pi += sympy.N(4 * ((-1) ** i), 101) / sympy.N(2 * i + 1, 101)\n",
        "print(pi)\n",
        "\n",
        "memoryUsed = tracemalloc.get_traced_memory() # Salva a memória usada\n",
        "tracemalloc.stop() # Finaliza monitoramento da memória\n",
        "endTime = time.time_ns() # Salva o tempo final em nanosegundos\n",
        "\n",
        "print(f\"Em {endTime - initialTime}ns foi usado ao final {memoryUsed[0]}bytes, com um pico de {memoryUsed[1]}bytes\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SsxFnUwWWomJ",
        "outputId": "362d5886-5380-43a9-b5bd-08028ab0d921"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.1416926635905432634607684458779405350448265333887126871248103720027220870108448916726730451918657706\n",
            "Em 2213684811ns foi usado ao final 213650bytes, com um pico de 272191bytes\n"
          ]
        }
      ]
    }
  ]
}
